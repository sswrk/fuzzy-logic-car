FUNCTION_BLOCK

VAR_INPUT
speed : REAL;
distance : REAL;
slipperiness : REAL;
END_VAR

VAR_OUTPUT
speed_difference : REAL;
END_VAR

FUZZIFY speed
TERM zero := (0, 1) (1, 0);
TERM slow := (0, 0) (10, 1) (20, 1) (60, 0);
TERM normal := (30, 0) (50, 1) (70, 1) (90, 0);
TERM fast := (70, 0) (90, 1) (130, 0);
TERM very_fast := (110, 0) (130, 1) (300, 1);
END_FUZZIFY

FUZZIFY distance
TERM bumper := (0,1) (1, 0);
TERM very_close := (0, 0) (1, 1) (2, 1) (3, 0);
TERM close := (1, 0) (3, 1) (4, 1) (5, 0);
TERM normal := (3, 0) (5, 1) (6, 1) (8, 0);
TERM far := (5,0) (7, 1) (12, 1);
END_FUZZIFY

FUZZIFY slipperiness
TERM low := (0, 1) (1, 1) (2, 1) (3, 0);
TERM average := (2, 0) (4, 1) (5, 1) (7, 0);
TERM high := (5, 0) (7, 1) (10, 1);
END_FUZZIFY

DEFUZZIFY speed_difference
TERM brake_quick := (-8, 1) (-7, 1) (-4, 0);
TERM brake := (-6, 0) (-4, 1) (-2, 1) (0, 0);
TERM wait :=  (0, 0);
TERM accelerate := (0, 0) (3, 1) (5, 1);
METHOD : COG;
DEFAULT := 0;
END_DEFUZZIFY

RULEBLOCK first
ACT: MIN;

RULE 0: IF (distance IS bumper OR distance IS very_close) AND speed IS zero THEN speed_difference IS wait;
RULE 1: IF (distance IS NOT bumper AND distance IS NOT very_close) AND speed IS zero THEN speed_difference IS accelerate;

RULE 2: IF distance IS bumper AND speed IS NOT zero THEN speed_difference IS brake_quick;

RULE 3: IF distance IS very_close AND speed IS slow THEN speed_difference IS wait;
RULE 4: IF distance IS very_close AND speed IS normal THEN speed_difference IS brake;
RULE 5: IF distance IS very_close AND (speed IS fast OR speed IS very_fast) THEN speed_difference IS brake_quick;

RULE 6: IF distance IS close AND speed IS slow THEN speed_difference IS wait;
RULE 7: IF distance IS close AND speed IS normal AND slipperiness IS low THEN speed_difference IS wait;
RULE 8: IF distance IS close AND (speed IS normal OR speed IS fast) AND slipperiness IS average THEN speed_difference IS brake;
RULE 9: IF distance IS close AND (speed IS normal OR speed IS fast OR speed IS very_fast) AND slipperiness IS high THEN speed_difference IS brake_quick;
RULE 10: IF distance IS close AND (speed IS fast OR speed IS very_fast) AND slipperiness IS low THEN speed_difference IS brake;
RULE 11: IF distance IS close AND speed IS very_fast AND slipperiness IS average THEN speed_difference IS brake_quick;

RULE 12: IF distance IS normal AND (speed IS slow OR speed IS normal) AND slipperiness IS low THEN speed_difference IS accelerate;
RULE 13: IF distance IS normal AND (speed IS slow OR speed IS normal) AND (slipperiness IS average OR slipperiness IS high) THEN speed_difference IS wait;
RULE 14: IF distance IS normal AND speed IS fast AND (slipperiness IS low OR slipperiness IS average) THEN speed_difference IS wait;
RULE 15: IF distance IS normal AND speed IS fast AND slipperiness IS high THEN speed_difference IS brake;
RULE 16: IF distance IS normal AND speed IS very_fast THEN speed_difference IS brake;

RULE 17: IF distance IS far AND (speed IS slow OR speed IS normal) THEN speed_difference IS accelerate;
RULE 18: IF distance IS far AND speed IS fast AND (slipperiness IS average OR slipperiness IS low) THEN speed_difference IS accelerate;
RULE 19: IF distance IS far AND speed IS fast AND slipperiness IS high THEN speed_difference IS wait;
RULE 20: IF distance IS far AND speed IS very_fast THEN speed_difference IS accelerate;

END_RULEBLOCK
END_FUNCTION_BLOCK